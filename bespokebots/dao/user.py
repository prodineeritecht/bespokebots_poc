from datetime import datetime
from zoneinfo import ZoneInfo
from bespokebots.dao.database import db
from bespokebots.dao import ServiceProviders, CredentialStatus
from bespokebots.dao.user_credentials import UserCredentials
from bespokebots.dao.oauth_state_token import OAuthStateToken
from sqlalchemy import join
import logging

logging.basicConfig(level=logging.INFO)
# Initialize the logger
logger = logging.getLogger(__name__)


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timezone = db.Column(db.String(120), nullable=True, default=ZoneInfo("America/New_York").key)
    auth_user_id = db.Column(db.String, unique=True, nullable=True) # Userid generated by the authentication system we integrate with
    username = db.Column(db.String(120), unique=True, nullable=False)
    date_created = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)

    # relationship to UserCredentials
    credentials = db.relationship("UserCredentials", backref="user", lazy=True, cascade="all,delete")

    # relationship to OAuthStateToken
    oauth_state_tokens = db.relationship("OAuthStateToken", backref="user", lazy=True, cascade="all,delete")

    @classmethod
    def find_by_user_name(cls, username, session=None):
        use_session = session or db.session
        return use_session.query(cls).filter_by(username=username).first()

    @classmethod
    def find_by_field_name(cls, field_name, field_value, session=None):
        use_session = session or db.session
        return use_session.query(cls).filter(getattr(cls, field_name) == field_value).first()

    @classmethod
    def find_by_credential_service_id(cls, service_name, service_user_id, session=None):
        use_session = session or db.session
        
        return (
            use_session.query(cls).join(UserCredentials)
            .filter(UserCredentials.service_name == service_name)
            .filter(UserCredentials.service_user_id == service_user_id)
            .first()
        )
    
    @classmethod
    def find_by_state_token(cls, token_value):
        token = OAuthStateToken.query.filter_by(value=token_value).first()
        if token and token.expires_at > datetime.utcnow():
            logger.info(f"Token {token_value} found for user {token.user_id}. Expiration: {token.expires_at}")
            return User.query.get(token.user_id)
        else:
            if token:
                #This might be a good place to raise a custom exception
                logger.warning(f"Token {token_value} has expired. Expiration: {token.expires_at}")
            else:
                logger.warning(f"Token {token_value} not found.")
            return None

